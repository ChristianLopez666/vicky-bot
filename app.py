import os
import logging
import requests
from flask import Flask, request, jsonify, Response
from datetime import datetime
import time
import json
from threading import Thread

# ==================== CONFIGURACI√ìN INICIAL ====================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# ==================== VARIABLES DE ENTORNO ====================
WHATSAPP_ACCESS_TOKEN = os.getenv('WHATSAPP_ACCESS_TOKEN')
WHATSAPP_VERIFY_TOKEN = os.getenv('WHATSAPP_VERIFY_TOKEN', 'vicky-verify-2025')
WHATSAPP_PHONE_NUMBER_ID = os.getenv('WHATSAPP_PHONE_NUMBER_ID')

# ==================== BASE DE DATOS EN MEMORIA ====================
campa√±as_activas = {}
seguimiento_clientes = {}
clientes_base = [
    {
        'nombre': 'Cliente Demo 1',
        'telefono': '5216681922865',
        'producto_interes': 'seguro_auto',
        'estado': 'Activo'
    },
    {
        'nombre': 'Cliente Demo 2', 
        'telefono': '5215551234567',
        'producto_interes': 'tarjeta_credito',
        'estado': 'Activo'
    }
]

# ==================== FUNCIONES PRINCIPALES ====================

def enviar_mensaje_whatsapp(numero, mensaje):
    """Env√≠a mensaje por WhatsApp Business API"""
    try:
        # Verificar credenciales
        if not WHATSAPP_ACCESS_TOKEN:
            logger.error("‚ùå WHATSAPP_ACCESS_TOKEN no configurado")
            return False
        if not WHATSAPP_PHONE_NUMBER_ID:
            logger.error("‚ùå WHATSAPP_PHONE_NUMBER_ID no configurado")
            return False

        # Configurar solicitud
        url = f"https://graph.facebook.com/v18.0/{WHATSAPP_PHONE_NUMBER_ID}/messages"
        
        headers = {
            "Authorization": f"Bearer {WHATSAPP_ACCESS_TOKEN}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "messaging_product": "whatsapp",
            "to": numero,
            "text": {"body": mensaje}
        }
        
        logger.info(f"üì§ Enviando mensaje a {numero}")
        
        # Enviar mensaje
        response = requests.post(url, headers=headers, json=payload, timeout=30)
        
        if response.status_code == 200:
            logger.info(f"‚úÖ Mensaje enviado exitosamente a {numero}")
            return True
        else:
            logger.error(f"‚ùå Error API WhatsApp: {response.status_code} - {response.text}")
            return False
            
    except requests.exceptions.Timeout:
        logger.error("‚ùå Timeout enviando mensaje a WhatsApp")
        return False
    except Exception as e:
        logger.error(f"‚ùå Error enviando mensaje: {e}")
        return False

def generar_mensaje_personalizado(nombre_cliente, tipo_campana):
    """Genera mensaje personalizado para campa√±as"""
    
    plantillas = {
        "seguro_auto": f"""¬°Hola {nombre_cliente}! üòä 

INBURSA te ofrece hasta un 60% de descuento en tu seguro de auto. 

Este descuento puede ser aprovechado para cualquier familiar que viva en tu domicilio.

¬øTe gustar√≠a que te env√≠e una cotizaci√≥n personalizada?""",

        "tarjeta_credito": f"""¬°Hola {nombre_cliente}! üí≥ 

Tenemos una promoci√≥n exclusiva de tarjetas de cr√©dito para ti:

‚Ä¢ Sin anualidad el primer a√±o
‚Ä¢ Aprobaci√≥n inmediata  
‚Ä¢ L√≠mites preferenciales

¬øPuedo ayudarte con el proceso?""",

        "credito_personal": f"""¬°Hola {nombre_cliente}! üí∞ 

¬øNecesitas liquidez? Tenemos cr√©ditos personales con:

‚Ä¢ Tasas preferenciales para clientes SECOM
‚Ä¢ Hasta $100,000 sin aval
‚Ä¢ Desembolso en 24 horas

¬°Solicita tu cotizaci√≥n sin compromiso!"""
    }
    
    return plantillas.get(tipo_campana, plantillas["seguro_auto"])

def ejecutar_campana_masiva(tipo_campana):
    """Ejecuta campa√±a masiva de mensajes"""
    logger.info(f"üöÄ Iniciando campa√±a masiva: {tipo_campana}")
    
    campa√±as_activas[tipo_campana] = {
        'inicio': datetime.now(),
        'total_clientes': len(clientes_base),
        'enviados': 0,
        'errores': 0,
        'estado': 'en_progreso'
    }
    
    for i, cliente in enumerate(clientes_base):
        if cliente['estado'] != 'Activo':
            continue
            
        try:
            # Generar mensaje personalizado
            mensaje = generar_mensaje_personalizado(cliente['nombre'], tipo_campana)
            
            # Enviar mensaje
            if enviar_mensaje_whatsapp(cliente['telefono'], mensaje):
                # Registrar en seguimiento
                seguimiento_clientes[cliente['telefono']] = {
                    'nombre': cliente['nombre'],
                    'campana': tipo_campana,
                    'primer_envio': datetime.now(),
                    'ultimo_envio': datetime.now(),
                    'respuestas': 0,
                    'estado': 'enviado'
                }
                campa√±as_activas[tipo_campana]['enviados'] += 1
                logger.info(f"‚úÖ Mensaje {i+1}/{len(clientes_base)} enviado a {cliente['nombre']}")
            else:
                campa√±as_activas[tipo_campana]['errores'] += 1
                logger.error(f"‚ùå Error enviando a {cliente['nombre']}")
            
            # Rate limiting (1 mensaje por segundo)
            if i < len(clientes_base) - 1:
                time.sleep(1)
                
        except Exception as e:
            logger.error(f"‚ùå Error con cliente {cliente['telefono']}: {e}")
            campa√±as_activas[tipo_campana]['errores'] += 1
    
    campa√±as_activas[tipo_campana]['estado'] = 'completada'
    campa√±as_activas[tipo_campana]['fin'] = datetime.now()
    logger.info(f"‚úÖ Campa√±a {tipo_campana} completada: {campa√±as_activas[tipo_campana]['enviados']} enviados, {campa√±as_activas[tipo_campana]['errores']} errores")

# ==================== WEBHOOK WHATSAPP ====================

@app.route("/webhook", methods=["GET", "POST"])
def webhook():
    """Maneja webhook de WhatsApp para verificaci√≥n y mensajes"""
    
    if request.method == "GET":
        # Verificaci√≥n del webhook
        mode = request.args.get("hub.mode")
        token = request.args.get("hub.verify_token")
        challenge = request.args.get("hub.challenge")
        
        logger.info(f"üîê Verificaci√≥n webhook - Mode: {mode}, Token: {token}")
        
        if mode and token:
            if mode == "subscribe" and token == WHATSAPP_VERIFY_TOKEN:
                logger.info("‚úÖ Webhook verificado exitosamente")
                return Response(challenge, status=200, mimetype='text/plain')
            else:
                logger.error("‚ùå Token de verificaci√≥n incorrecto")
                return Response("Verification failed", status=403)
        else:
            logger.error("‚ùå Par√°metros de verificaci√≥n faltantes")
            return Response("Missing parameters", status=400)
    
    elif request.method == "POST":
        try:
            logger.info("üì® Webhook POST recibido")
            data = request.get_json()
            
            # Log simplificado del webhook
            if data and data.get("object") == "whatsapp_business_account":
                entries = data.get("entry", [])
                logger.info(f"üìã Procesando {len(entries)} entradas del webhook")
                
                for entry in entries:
                    for change in entry.get("changes", []):
                        if change.get("field") == "messages":
                            message_data = change.get("value", {})
                            procesar_mensaje_entrante(message_data)
            
            return jsonify({"status": "success"}), 200
            
        except Exception as e:
            logger.error(f"‚ùå Error procesando webhook POST: {e}")
            return jsonify({"status": "error", "message": str(e)}), 500

def procesar_mensaje_entrante(message_data):
    """Procesa mensajes entrantes de WhatsApp"""
    try:
        messages = message_data.get("messages", [])
        if not messages:
            logger.info("üì≠ No hay mensajes en la entrada")
            return
        
        message = messages[0]
        telefono = message.get("from")
        message_type = message.get("type")
        message_id = message.get("id")
        
        logger.info(f"üì© Mensaje recibido - ID: {message_id}, De: {telefono}, Tipo: {message_type}")
        
        if message_type == "text":
            texto = message.get("text", {}).get("body", "").lower()
            logger.info(f"üí¨ Texto recibido de {telefono}: {texto}")
            
            # Actualizar seguimiento si existe
            if telefono in seguimiento_clientes:
                seguimiento_clientes[telefono]['respuestas'] += 1
                seguimiento_clientes[telefono]['ultimo_envio'] = datetime.now()
                seguimiento_clientes[telefono]['estado'] = 'respondio'
            else:
                # Cliente nuevo que escribe espont√°neamente
                seguimiento_clientes[telefono] = {
                    'nombre': 'Cliente Nuevo',
                    'campana': 'espontaneo',
                    'primer_envio': datetime.now(),
                    'ultimo_envio': datetime.now(),
                    'respuestas': 1,
                    'estado': 'respondio'
                }
            
            # Generar y enviar respuesta autom√°tica
            responder_mensaje_cliente(telefono, texto)
            
        else:
            logger.info(f"üìé Mensaje no textual recibido - Tipo: {message_type}")
            # Responder a mensajes no textuales
            enviar_mensaje_whatsapp(telefono, "¬°Hola! Soy Vicky de SECOM. üòä Por el momento solo puedo procesar mensajes de texto. ¬øEn qu√© puedo ayudarte?")
            
    except Exception as e:
        logger.error(f"‚ùå Error procesando mensaje entrante: {e}")

def responder_mensaje_cliente(telefono, texto):
    """Genera respuesta autom√°tica inteligente basada en el texto recibido"""
    try:
        texto_limpio = texto.lower().strip()
        
        # L√≥gica de respuestas inteligentes
        if any(palabra in texto_limpio for palabra in ['hola', 'hi', 'hello', 'buenas', 'saludos']):
            respuesta = """¬°Hola! üëã Soy Vicky, tu asistente virtual de SECOM. 

üòä ¬øEn qu√© puedo ayudarte hoy?

‚Ä¢ üöó Seguros de auto
‚Ä¢ üí≥ Tarjetas de cr√©dito  
‚Ä¢ üí∞ Cr√©ditos personales

Escribe la opci√≥n que te interesa."""

        elif any(palabra in texto_limpio for palabra in ['si', 's√≠', 'info', 'informaci√≥n', 'interesado', 'cuanto', 'cuesta', 'cotiz', 'precio']):
            respuesta = """¬°Me alegra tu inter√©s! üí´ 

Te estoy conectando con uno de nuestros especialistas que te dar√° todos los detalles y precios personalizados.

¬øPodr√≠as compartirme tu email para enviarte informaci√≥n completa?"""

        elif any(palabra in texto_limpio for palabra in ['seguro', 'auto', 'carro', 'veh√≠culo', 'coche']):
            respuesta = """¬°Excelente elecci√≥n! üöó 

Para el seguro de auto podemos ofrecerte:
‚Ä¢ Hasta 60% de descuento
‚Ä¢ Cobertura para familiares en tu domicilio
‚Ä¢ Asistencia vial 24/7

¬øMe compartes tu email para enviarte una cotizaci√≥n personalizada?"""

        elif any(palabra in texto_limpio for palabra in ['tarjeta', 'credito', 'visa', 'mastercard', 'd√©bito']):
            respuesta = """¬°Perfecto! üí≥ 

Nuestras tarjetas incluyen:
‚Ä¢ Sin anualidad el primer a√±o
‚Ä¢ Aprobaci√≥n inmediata
‚Ä¢ Programa de recompensas

¬øPodr√≠as decirme tu email para enviarte los requisitos y beneficios completos?"""

        elif any(palabra in texto_limpio for palabra in ['credito', 'pr√©stamo', 'dinero', 'financiamiento', 'liquidez']):
            respuesta = """¬°Entendido! üí∞ 

Para cr√©ditos personales manejamos:
‚Ä¢ Tasas preferenciales
‚Ä¢ Hasta $100,000 sin aval
‚Ä¢ Desembolso en 24 horas

¬øMe compartes tu email para cotizar sin compromiso?"""

        elif any(palabra in texto_limpio for palabra in ['no', 'gracias', 'ahora no', 'despues', 'luego']):
            respuesta = """Entendido, ¬°gracias por tu tiempo! üòä 

Si cambias de opini√≥n, aqu√≠ estar√© para ayudarte con:
‚Ä¢ Seguros de auto üöó
‚Ä¢ Tarjetas de cr√©dito üí≥
‚Ä¢ Cr√©ditos personales üí∞

¬°Que tengas un excelente d√≠a! üåü"""

        elif any(palabra in texto_limpio for palabra in ['email', 'correo', 'mail']):
            respuesta = """üìß Perfecto, he registrado tu solicitud. 

Un especialista de SECOM se pondr√° en contacto contigo en las pr√≥ximas horas con la informaci√≥n completa.

Mientras tanto, ¬øhay algo m√°s en lo que pueda ayudarte?"""

        else:
            respuesta = """¬°Hola! Soy Vicky de SECOM. üòä 

¬øTe interesa conocer sobre alguna de estas opciones?

üöó **Seguros de auto** - Hasta 60% descuento
üí≥ **Tarjetas de cr√©dito** - Sin anualidad 1er a√±o  
üí∞ **Cr√©ditos personales** - Hasta $100,000 sin aval

Solo dime qu√© te interesa para ayudarte mejor."""

        # Enviar respuesta
        if enviar_mensaje_whatsapp(telefono, respuesta):
            logger.info(f"‚úÖ Respuesta enviada exitosamente a {telefono}")
        else:
            logger.error(f"‚ùå Error enviando respuesta a {telefono}")
            
    except Exception as e:
        logger.error(f"‚ùå Error en responder_mensaje_cliente: {e}")

# ==================== ENDPOINTS DE CONTROL ====================

@app.route("/")
def home():
    """Endpoint principal de salud"""
    return jsonify({
        "status": "active",
        "service": "Vicky SECOM - WhatsApp Business Bot",
        "timestamp": datetime.now().isoformat(),
        "webhook_url": "https://vicky-bot-x6wt.onrender.com/webhook",
        "whatsapp_configured": bool(WHATSAPP_ACCESS_TOKEN and WHATSAPP_PHONE_NUMBER_ID),
        "clientes_seguimiento": len(seguimiento_clientes),
        "campa√±as_activas": len([c for c in campa√±as_activas.values() if c.get('estado') == 'en_progreso'])
    })

@app.route("/health")
def health():
    """Endpoint de salud simplificado"""
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "whatsapp_configured": bool(WHATSAPP_ACCESS_TOKEN and WHATSAPP_PHONE_NUMBER_ID)
    })

@app.route("/debug")
def debug():
    """Endpoint de diagn√≥stico"""
    return jsonify({
        "whatsapp_access_token_length": len(WHATSAPP_ACCESS_TOKEN or ""),
        "whatsapp_phone_number_id": WHATSAPP_PHONE_NUMBER_ID,
        "verify_token": WHATSAPP_VERIFY_TOKEN,
        "whatsapp_fully_configured": bool(WHATSAPP_ACCESS_TOKEN and WHATSAPP_PHONE_NUMBER_ID),
        "total_clientes_base": len(clientes_base),
        "total_seguimiento": len(seguimiento_clientes),
        "campa√±as_activas": campa√±as_activas
    })

@app.route("/iniciar-campana/<tipo_campana>", methods=["POST"])
def iniciar_campana(tipo_campana):
    """Endpoint para iniciar campa√±a manualmente"""
    try:
        tipos_validos = ['seguro_auto', 'tarjeta_credito', 'credito_personal']
        
        if tipo_campana not in tipos_validos:
            return jsonify({
                "error": "Tipo de campa√±a no v√°lido",
                "tipos_permitidos": tipos_validos
            }), 400
        
        # Verificar que no hay campa√±a en progreso
        campa√±a_en_progreso = any(
            campana.get('estado') == 'en_progreso' 
            for campana in campa√±as_activas.values()
        )
        
        if campa√±a_en_progreso:
            return jsonify({
                "error": "Ya hay una campa√±a en progreso",
                "campa√±a_activa": True
            }), 409
        
        # Ejecutar campa√±a en hilo separado
        thread = Thread(target=ejecutar_campana_masiva, args=(tipo_campana,))
        thread.daemon = True
        thread.start()
        
        return jsonify({
            "status": "campana_iniciada",
            "tipo": tipo_campana,
            "mensaje": "Campa√±a iniciada en segundo plano",
            "total_clientes": len(clientes_base),
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error iniciando campa√±a: {e}")
        return jsonify({"error": str(e)}), 500

@app.route("/estado-campanas")
def estado_campanas():
    """Endpoint para ver estado de campa√±as"""
    return jsonify({
        "campa√±as_activas": campa√±as_activas,
        "total_campa√±as": len(campa√±as_activas),
        "campa√±as_en_progreso": len([c for c in campa√±as_activas.values() if c.get('estado') == 'en_progreso']),
        "seguimiento_clientes": seguimiento_clientes,
        "timestamp": datetime.now().isoformat()
    })

@app.route("/test-mensaje", methods=["POST"])
def test_mensaje():
    """Endpoint para probar env√≠o de mensajes"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({"error": "JSON body requerido"}), 400
        
        telefono = data.get('telefono')
        mensaje = data.get('mensaje', 'Este es un mensaje de prueba de Vicky-SECOM Bot')
        
        if not telefono:
            return jsonify({"error": "N√∫mero de tel√©fono requerido"}), 400
        
        # Validar formato de tel√©fono
        if not telefono.startswith('521'):
            telefono = '521' + telefono.lstrip('1')
        
        logger.info(f"üß™ Enviando mensaje de prueba a {telefono}")
        
        if enviar_mensaje_whatsapp(telefono, mensaje):
            return jsonify({
                "status": "mensaje_enviado",
                "telefono": telefono,
                "mensaje": mensaje,
                "timestamp": datetime.now().isoformat()
            })
        else:
            return jsonify({
                "error": "No se pudo enviar el mensaje",
                "telefono": telefono
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå Error en test-mensaje: {e}")
        return jsonify({"error": str(e)}), 500

@app.route("/webhook/test", methods=["GET"])
def test_webhook():
    """Endpoint para probar verificaci√≥n de webhook"""
    return jsonify({
        "webhook_url": "https://vicky-bot-x6wt.onrender.com/webhook",
        "verify_token": WHATSAPP_VERIFY_TOKEN,
        "verification_url": f"https://vicky-bot-x6wt.onrender.com/webhook?hub.mode=subscribe&hub.verify_token={WHATSAPP_VERIFY_TOKEN}&hub.challenge=TEST123"
    })

# ==================== MANEJO DE ERRORES ====================

@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Endpoint no encontrado"}), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({"error": "Error interno del servidor"}), 500

# ==================== INICIALIZACI√ìN ====================

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    
    logger.info("üöÄ" * 50)
    logger.info("üöÄ VICKY SECOM - BOT INICIADO")
    logger.info("üöÄ" * 50)
    logger.info(f"üîß Configuraci√≥n:")
    logger.info(f"   ‚úÖ Webhook: https://vicky-bot-x6wt.onrender.com/webhook")
    logger.info(f"   ‚úÖ WhatsApp Token: {'CONFIGURADO' if WHATSAPP_ACCESS_TOKEN else 'NO CONFIGURADO'}")
    logger.info(f"   ‚úÖ WhatsApp Phone ID: {'CONFIGURADO' if WHATSAPP_PHONE_NUMBER_ID else 'NO CONFIGURADO'}")
    logger.info(f"   ‚úÖ Verify Token: {WHATSAPP_VERIFY_TOKEN}")
    logger.info(f"üåê Servidor iniciado en puerto {port}")
    logger.info("üì± Listo para recibir mensajes de WhatsApp...")
    
    app.run(host='0.0.0.0', port=port, debug=False)

