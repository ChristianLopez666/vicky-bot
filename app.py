import os
import logging
import requests
from flask import Flask, request, jsonify
import gspread
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload
import openai
import io
from datetime import datetime
import re
import json

# Configuraci√≥n de logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)

# Configuraci√≥n de variables de entorno
META_ACCESS_TOKEN = os.getenv('META_ACCESS_TOKEN')
VERIFY_TOKEN = os.getenv('VERIFY_TOKEN', 'vicky-verify-2025')
ADVISOR_NUMBER = os.getenv('ADVISOR_NUMBER')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# Configurar OpenAI
openai.api_key = OPENAI_API_KEY

# Inicializar servicios de Google
sheet = None
drive_service = None

try:
    GOOGLE_SHEETS_CREDENTIALS = os.getenv('GOOGLE_SHEETS_CREDENTIALS')
    if GOOGLE_SHEETS_CREDENTIALS:
        creds_dict = json.loads(GOOGLE_SHEETS_CREDENTIALS)
        credentials = service_account.Credentials.from_service_account_info(creds_dict)
        scoped_credentials = credentials.with_scopes([
            'https://www.googleapis.com/auth/spreadsheets',
            'https://www.googleapis.com/auth/drive'
        ])
        client = gspread.authorize(scoped_credentials)
        sheet = client.open("Prospectos SECOM Auto").sheet1
        logger.info("‚úÖ Google Sheets configurado")
except Exception as e:
    logger.warning(f"‚ùå Google Sheets no configurado: {e}")

try:
    GOOGLE_DRIVE_CREDENTIALS = os.getenv('GOOGLE_DRIVE_CREDENTIALS')
    if GOOGLE_DRIVE_CREDENTIALS:
        creds_dict = json.loads(GOOGLE_DRIVE_CREDENTIALS)
        credentials = service_account.Credentials.from_service_account_info(creds_dict)
        drive_service = build('drive', 'v3', credentials=credentials)
        logger.info("‚úÖ Google Drive configurado")
except Exception as e:
    logger.warning(f"‚ùå Google Drive no configurado: {e}")

def get_gpt_response(prompt):
    """Obtiene respuesta de OpenAI GPT"""
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Eres Vicky, una asistente virtual educada y servicial de SECOM. Ofreces informaci√≥n sobre pensiones IMSS, seguros de auto, tarjetas m√©dicas VRIM y contactas con asesores."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=150,
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"Error en GPT: {e}")
        return "Lo siento, estoy teniendo dificultades t√©cnicas. Por favor, selecciona una opci√≥n del men√∫:\n\n1Ô∏è‚É£ Pensiones IMSS\n2Ô∏è‚É£ Seguros de Auto\n5Ô∏è‚É£ Tarjetas m√©dicas VRIM\n7Ô∏è‚É£ Contactar a Christian"

def send_whatsapp_message(phone_number, message):
    """Env√≠a mensaje a trav√©s de Meta WhatsApp API"""
    try:
        url = "https://graph.facebook.com/v17.0/118469193281675/messages"
        headers = {
            "Authorization": f"Bearer {META_ACCESS_TOKEN}",
            "Content-Type": "application/json"
        }
        data = {
            "messaging_product": "whatsapp",
            "to": phone_number,
            "text": {"body": message}
        }
        
        response = requests.post(url, headers=headers, json=data)
        if response.status_code == 200:
            logger.info(f"‚úÖ Mensaje enviado a {phone_number}")
            return True
        else:
            logger.error(f"‚ùå Error enviando mensaje: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        logger.error(f"‚ùå Excepci√≥n enviando mensaje: {e}")
        return False

def notify_advisor(client_number, service_type, message=None):
    """Notifica al asesor sobre un nuevo prospecto"""
    try:
        notification = f"üö® NUEVO PROSPECTO üö®\n\nüìû Tel√©fono: {client_number}\nüìã Servicio: {service_type}"
        if message:
            notification += f"\nüí¨ Mensaje: {message}"
        
        send_whatsapp_message(ADVISOR_NUMBER, notification)
        
        if sheet:
            try:
                next_row = len(sheet.get_all_values()) + 1
                sheet.update(f"A{next_row}:D{next_row}", [[
                    datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    client_number,
                    service_type,
                    "Activo"
                ]])
                logger.info(f"‚úÖ Prospecto registrado en Sheets: {client_number}")
            except Exception as e:
                logger.error(f"‚ùå Error registrando en Sheets: {e}")
        
        logger.info(f"‚úÖ Asesor notificado: {client_number}")
        return True
    except Exception as e:
        logger.error(f"‚ùå Error notificando al asesor: {e}")
        return False

# WEBHOOK PRINCIPAL - VERSI√ìN SIMPLIFICADA Y ROBUSTA
@app.route("/webhook", methods=["GET", "POST"])
def webhook():
    """Webhook principal para WhatsApp - Versi√≥n corregida"""
    
    # VERIFICACI√ìN DEL WEBHOOK (GET)
    if request.method == "GET":
        logger.info("=== SOLICITUD DE VERIFICACI√ìN META RECIBIDA ===")
        
        mode = request.args.get("hub.mode")
        token = request.args.get("hub.verify_token")
        challenge = request.args.get("hub.challenge")
        
        logger.info(f"Mode: {mode}")
        logger.info(f"Token recibido: {token}")
        logger.info(f"Token esperado: {VERIFY_TOKEN}")
        logger.info(f"Challenge: {challenge}")
        
        # Verificar los par√°metros
        if not all([mode, token, challenge]):
            logger.error("‚ùå Faltan par√°metros en la solicitud")
            return "Missing parameters", 400
        
        if mode == "subscribe" and token == VERIFY_TOKEN:
            logger.info("‚úÖ‚úÖ‚úÖ VERIFICACI√ìN EXITOSA - Webhook configurado correctamente")
            # Devolver el challenge como texto plano
            from flask import Response
            response = Response(challenge, status=200, mimetype='text/plain')
            return response
        else:
            logger.error(f"‚ùå VERIFICACI√ìN FALLIDA - Token mismatch: {token} vs {VERIFY_TOKEN}")
            return "Verification failed", 403
    
    # PROCESAR MENSAJES (POST)
    elif request.method == "POST":
        logger.info("üì® Mensaje POST recibido de Meta")
        
        try:
            data = request.get_json()
            logger.info(f"Datos recibidos: {json.dumps(data, indent=2)[:500]}...")
            
            # Verificar estructura b√°sica
            if not data or data.get("object") != "whatsapp_business_account":
                logger.error("Estructura de datos inv√°lida")
                return jsonify({"status": "error"}), 400
            
            # Procesar entradas
            entries = data.get("entry", [])
            logger.info(f"N√∫mero de entradas: {len(entries)}")
            
            for entry in entries:
                changes = entry.get("changes", [])
                for change in changes:
                    if change.get("field") == "messages":
                        message_data = change.get("value", {})
                        process_message(message_data)
            
            logger.info("‚úÖ Webhook procesado correctamente")
            return jsonify({"status": "success"}), 200
            
        except Exception as e:
            logger.error(f"‚ùå Error procesando webhook POST: {e}")
            return jsonify({"status": "error", "message": str(e)}), 500

def process_message(message_data):
    """Procesa los mensajes entrantes"""
    try:
        messages = message_data.get("messages", [])
        if not messages:
            logger.info("No hay mensajes en los datos")
            return
        
        message = messages[0]
        phone_number = message.get("from")
        message_type = message.get("type")
        
        if not phone_number:
            logger.error("No se encontr√≥ n√∫mero de tel√©fono")
            return
        
        client_number = re.sub(r'\D', '', phone_number)[-10:]
        logger.info(f"üì± Procesando mensaje de {client_number}, tipo: {message_type}")
        
        if message_type == "text":
            process_text_message(message, client_number)
        elif message_type in ["image", "document"]:
            process_media_message(message, client_number, message_type)
        else:
            logger.info(f"Tipo de mensaje no manejado: {message_type}")
            
    except Exception as e:
        logger.error(f"‚ùå Error en process_message: {e}")

def process_text_message(message, client_number):
    """Procesa mensajes de texto"""
    try:
        text_body = message.get("text", {}).get("body", "").strip()
        logger.info(f"üí¨ Texto recibido: {text_body}")
        
        # Men√∫ de opciones
        if text_body == "1":
            response = """üè• *PENSIONES IMSS*

¬øCumples alguno de estos requisitos?

‚Ä¢ 60 a√±os o m√°s
‚Ä¢ 500 semanas cotizadas
‚Ä¢ Trabajaste antes de 1997

Si cumples alguno, ¬°podr√≠as tener derecho a tu pensi√≥n! Un asesor se contactar√° contigo."""
            send_whatsapp_message(client_number, response)
            notify_advisor(client_number, "Pensiones IMSS")
            
        elif text_body == "2":
            response = """üöó *SEGUROS DE AUTO*

Protege tu auto con las mejores coberturas:

‚Ä¢ Responsabilidad Civil
‚Ä¢ Da√±os Materiales
‚Ä¢ Robo Total
‚Ä¢ Asistencia Vial

Por favor, env√≠a fotos de:
1. INE (ambos lados)
2. Tarjeta de circulaci√≥n"""
            send_whatsapp_message(client_number, response)
            notify_advisor(client_number, "Seguros de Auto")
            
        elif text_body == "5":
            response = """üè• *TARJETAS M√âDICAS VRIM*

Beneficios exclusivos para militares:

‚Ä¢ Atenci√≥n m√©dica especializada
‚Ä¢ Medicamentos gratuitos
‚Ä¢ Estudios de laboratorio
‚Ä¢ Consultas con especialistas

Un asesor te contactar√° para explicarte el proceso."""
            send_whatsapp_message(client_number, response)
            notify_advisor(client_number, "Tarjetas M√©dicas VRIM")
            
        elif text_body == "7":
            response = "üë®‚Äçüíº Te pondr√© en contacto con Christian, nuestro especialista. √âl te atender√° personalmente en breve."
            send_whatsapp_message(client_number, response)
            notify_advisor(client_number, "Contactar Asesor")
            
        else:
            lower_text = text_body.lower()
            if any(word in lower_text for word in ['hola', 'buenas', 'info', 'opciones', 'menu']):
                welcome_message = """¬°Hola! üëã Soy Vicky, tu asistente virtual de SECOM.

¬øEn qu√© te puedo ayudar? Selecciona una opci√≥n:

1Ô∏è‚É£ Pensiones IMSS
2Ô∏è‚É£ Seguros de Auto  
5Ô∏è‚É£ Tarjetas m√©dicas VRIM
7Ô∏è‚É£ Contactar a Christian"""
                send_whatsapp_message(client_number, welcome_message)
            else:
                gpt_response = get_gpt_response(f"El cliente dijo: '{text_body}'. Responde educadamente como Vicky de SECOM y sugiere las opciones del men√∫.")
                send_whatsapp_message(client_number, gpt_response)
            
    except Exception as e:
        logger.error(f"‚ùå Error en process_text_message: {e}")
        send_whatsapp_message(client_number, "Lo siento, hubo un error. Por favor, selecciona: 1, 2, 5 o 7.")

def process_media_message(message, client_number, message_type):
    """Procesa archivos multimedia"""
    try:
        file_type = "imagen" if message_type == "image" else "documento"
        logger.info(f"üìé {file_type} recibido de {client_number}")
        
        notification = f"üìé Se recibi√≥ un {file_type} del cliente {client_number}"
        send_whatsapp_message(ADVISOR_NUMBER, notification)
        
        confirmation = f"‚úÖ Recib√≠ tu {file_type}. Un asesor revisar√° tu documentaci√≥n y te contactar√° pronto."
        send_whatsapp_message(client_number, confirmation)
            
    except Exception as e:
        logger.error(f"‚ùå Error en process_media_message: {e}")

@app.route("/")
def health_check():
    return jsonify({
        "status": "active",
        "service": "Vicky Bot SECOM",
        "webhook_url": "https://vicky-bot-x6wt.onrender.com/webhook",
        "verify_token": VERIFY_TOKEN,
        "timestamp": datetime.now().isoformat()
    })

@app.route("/debug-webhook")
def debug_webhook():
    """P√°gina de debug para el webhook"""
    return f"""
    <html>
        <head><title>Debug Webhook Meta</title></head>
        <body>
            <h1>üîß Debug Webhook Meta</h1>
            <p><strong>URL del Webhook:</strong> https://vicky-bot-x6wt.onrender.com/webhook</p>
            <p><strong>Token de Verificaci√≥n:</strong> {VERIFY_TOKEN}</p>
            <p><strong>Estado:</strong> ‚úÖ Activo</p>
            <p><strong>Instrucciones:</strong></p>
            <ol>
                <li>Ve a Meta Developer ‚Üí WhatsApp ‚Üí Configuration</li>
                <li>En Callback URL pon: <code>https://vicky-bot-x6wt.onrender.com/webhook</code></li>
                <li>En Verify Token pon: <code>{VERIFY_TOKEN}</code></li>
                <li>Haz clic en "Verify and Save"</li>
            </ol>
            <p><a href="https://vicky-bot-x6wt.onrender.com/">Volver al inicio</a></p>
        </body>
    </html>
    """

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    logger.info(f"üöÄ Iniciando Vicky Bot en puerto {port}")
    logger.info(f"üîó Webhook URL: https://vicky-bot-x6wt.onrender.com/webhook")
    logger.info(f"üîë Verify Token: {VERIFY_TOKEN}")
    app.run(host='0.0.0.0', port=port, debug=False)

