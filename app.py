# ========================================================
# app.py ‚Äì Vicky Bot Fase 1 (Render / Flask / WhatsApp API)
# Versi√≥n final corregida, integra:
# 1. Notificaci√≥n al asesor (opci√≥n 7)
# 2. Gesti√≥n de archivos entrantes (im√°genes, docs, audios, respaldo Drive)
# 3. Integraci√≥n m√≠nima SECOM (matching + beneficio)
# 4. Endpoint /ext/send-promo robusto (hilo segundo plano)
# ========================================================

import os 
import logging
import requests
from flask import Flask, request, jsonify
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# --- Utilidades Google Drive ---
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload

def _drive_service():
    creds = Credentials.from_service_account_info(json.loads(os.getenv("GOOGLE_CREDENTIALS_JSON")))
    return build("drive", "v3", credentials=creds)

def save_file_to_drive(local_path, filename, folder_id):
    service = _drive_service()
    file_metadata = {"name": filename, "parents": [folder_id]}
    media = MediaFileUpload(local_path, resumable=True)
    uploaded = service.files().create(body=file_metadata, media_body=media, fields="id").execute()
    return uploaded.get("id")


# Configuraci√≥n de logging
logging.basicConfig(level=logging.INFO)

# Inicializar Flask
app = Flask(__name__)

# Variables de entorno
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN")
WHATSAPP_TOKEN = os.getenv("META_TOKEN")  # ‚úÖ Ajustado para Render
PHONE_NUMBER_ID = os.getenv("PHONE_NUMBER_ID")
ADVISOR_NUMBER = os.getenv("ADVISOR_NUMBER", "5216682478005")  # Notificaci√≥n privada al asesor
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # ‚úÖ GPT (opcional)

# üß† Controles en memoria
PROCESSED_MESSAGE_IDS = set()
GREETED_USERS = set()
LAST_INTENT = {}   # √∫ltimo intent (para motivo de contacto)
USER_CONTEXT = {}  # estado por usuario {wa_id: {"ctx": str, "ts": float}}

# --------- GPT fallback robusto (opcional) ----------
def gpt_reply(user_text: str) -> str | None:
    """
    Devuelve respuesta breve usando GPT si OPENAI_API_KEY existe.
    1) Intenta /v1/responses (model gpt-4o-mini)
    2) Si falla, intenta /v1/chat/completions
    Timeout a 9s para reducir timeouts.
    Si hay 429 (cuota), devuelve mensaje amable.
    """
    if not OPENAI_API_KEY:
        return None

    system_prompt = (
        "Eres Vicky, asistente de Christian L√≥pez (asesor financiero de Inbursa). "
        "Responde en espa√±ol, breve, clara y orientada al siguiente paso. "
        "Si faltan datos para cotizar, pide solo lo necesario. "
        "Evita cifras inventadas. Si preguntan por opciones, sugiere escribir 'menu'."
    )

    # Header base + (opcional) proyecto si est√° definido en env
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }
    try:
        project_id = os.getenv("OPENAI_PROJECT_ID")
        if project_id:
            headers["OpenAI-Project"] = project_id
    except Exception:
        pass

    # 1) /v1/responses (recomendado)
    try:
        resp = requests.post(
            "https://api.openai.com/v1/responses",
            headers=headers,
            json={
                "model": "gpt-4o-mini",
                "input": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_text}
                ],
                "max_output_tokens": 220,
                "temperature": 0.3,
            },
            timeout=9,
        )
        if resp.status_code == 200:
            data = resp.json()
            out = (data.get("output", [{}])[0].get("content", [{}])[0].get("text")
                   if "output" in data else None)
            if out:
                return out.strip()
            # Compatibilidad por si viniera en 'choices'
            ch = data.get("choices", [{}])[0].get("message", {}).get("content")
            if ch:
                return ch.strip()
        elif resp.status_code == 429:
            logging.warning(f"[GPT responses] 429: {resp.text[:200]}")
            return ("Estoy recibiendo muchas consultas ahora mismo. "
                    "Puedo avanzar con una orientaci√≥n breve: si deseas **seguro de vida y salud**, "
                    "te preparo una cotizaci√≥n personalizada; comp√°rteme *edad*, *ciudad* y si buscas "
                    "*temporal* o *vitalicio*. Escribe 'menu' para ver m√°s opciones.")
        else:
            logging.warning(f"[GPT responses] {resp.status_code}: {resp.text[:200]}")
    except Exception as e:
        logging.error(f"[GPT responses] error: {e}")

    # 2) /v1/chat/completions (compatibilidad)
    try:
        resp = requests.post(
            "https://api.openai.com/v1/chat/completions",
            headers=headers,
            json={
                "model": "gpt-4o-mini",
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_text},
                ],
                "max_tokens": 220,
                "temperature": 0.3,
            },
            timeout=9,
        )
        if resp.status_code == 200:
            data = resp.json()
            msg = data.get("choices", [{}])[0].get("message", {}).get("content")
            return msg.strip() if msg else None
        elif resp.status_code == 429:
            logging.warning(f"[GPT chat] 429: {resp.text[:200]}")
            return ("En este momento el servicio de IA alcanz√≥ su l√≠mite de uso. "
                    "Mientras tanto: para **seguro de vida**, dime *edad*, *ciudad* y si te interesa "
                    "*temporal* o *vitalicio*, y te gu√≠o. Escribe 'menu' para ver opciones.")
        else:
            logging.warning(f"[GPT chat] {resp.status_code}: {resp.text[:200]}")
    except Exception as e:
        logging.error(f"[GPT chat] error: {e}")

    return None
# ----------------------------------------------------

# === üÜï BLOQUE 1: utilidades de medios (reenviar fotos/documentos y transcribir audios) ===
def _get_media_url(media_id: str) -> str | None:
    try:
        resp = requests.get(
            f"https://graph.facebook.com/v21.0/{media_id}",
            headers={"Authorization": f"Bearer {WHATSAPP_TOKEN}"},
            timeout=8,
        )
        if resp.status_code == 200:
            return resp.json().get("url")
        logging.warning(f"[WA media url] {resp.status_code}: {resp.text[:180]}")
    except Exception as e:
        logging.error(f"[WA media url] error: {e}")
    return None

def _download_media_bytes(url: str) -> bytes | None:
    try:
        r = requests.get(url, headers={"Authorization": f"Bearer {WHATSAPP_TOKEN}"}, timeout=12)
        if r.status_code == 200:
            return r.content
        logging.warning(f"[WA media dl] {r.status_code}: {r.text[:180]}")
    except Exception as e:
        logging.error(f"[WA media dl] error: {e}")
    return None

def send_media_image(to: str, media_id: str, caption: str = ""):
    url = f"https://graph.facebook.com/v21.0/{PHONE_NUMBER_ID}/messages"
    headers = {
        "Authorization": f"Bearer {WHATSAPP_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "messaging_product": "whatsapp",
        "to": to,
        "type": "image",
        "image": {"id": media_id, **({"caption": caption} if caption else {})}
    }
    resp = requests.post(url, headers=headers, json=payload)
    logging.info(f"[WA send image] {resp.status_code} - {resp.text[:180]}")

def send_media_document(to: str, media_id: str, caption: str = ""):
    url = f"https://graph.facebook.com/v21.0/{PHONE_NUMBER_ID}/messages"
    headers = {
        "Authorization": f"Bearer {WHATSAPP_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "messaging_product": "whatsapp",
        "to": to,
        "type": "document",
        "document": {"id": media_id, **({"caption": caption} if caption else {})}
    }
    resp = requests.post(url, headers=headers, json=payload)
    logging.info(f"[WA send doc] {resp.status_code} - {resp.text[:180]}")

def transcribe_audio_media(media_id: str) -> str | None:
    """
    Descarga el audio de WhatsApp y lo transcribe con Whisper si hay OPENAI_API_KEY.
    """
    if not OPENAI_API_KEY:
        return None
    url = _get_media_url(media_id)
    if not url:
        return None
    blob = _download_media_bytes(url)
    if not blob:
        return None

    files = {
        "file": ("audio.ogg", blob, "audio/ogg"),
    }
    data = {"model": "whisper-1", "response_format": "text", "language": "es"}
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    try:
        r = requests.post("https://api.openai.com/v1/audio/transcriptions",
                          headers=headers, data=data, files=files, timeout=30)
        if r.status_code == 200:
            return r.text.strip()
        logging.warning(f"[Whisper] {r.status_code}: {r.text[:200]}")
    except Exception as e:
        logging.error(f"[Whisper] error: {e}")
    return None
# === FIN BLOQUE 1 ===

# Endpoint de verificaci√≥n
@app.route("/webhook", methods=["GET"])
def verify_webhook():
    mode = request.args.get("hub.mode")
    token = request.args.get("hub.verify_token")
    challenge = request.args.get("hub.challenge")

    if mode == "subscribe" and token == VERIFY_TOKEN:
        logging.info("Webhook verificado correctamente ‚úÖ")
        return challenge, 200
    else:
        logging.warning("Fallo en la verificaci√≥n del webhook ‚ùå")
        return "Verification failed", 403

# Endpoint para recibir mensajes
@app.route("/webhook", methods=["POST"])
def receive_message():
    data = request.get_json()
    logging.info(f"üì© Mensaje recibido: {data}")

    if not data or "entry" not in data:
        return jsonify({"status": "ignored"}), 200

    from time import time
    now = time()

    global PROCESSED_MESSAGE_IDS, GREETED_USERS, LAST_INTENT, USER_CONTEXT
    if isinstance(PROCESSED_MESSAGE_IDS, set):
        PROCESSED_MESSAGE_IDS = {}
    if isinstance(GREETED_USERS, set):
        GREETED_USERS = {}

    MSG_TTL = 600
    GREET_TTL = 24 * 3600
    CTX_TTL = 4 * 3600

    if len(PROCESSED_MESSAGE_IDS) > 5000:
        PROCESSED_MESSAGE_IDS = {k: v for k, v in PROCESSED_MESSAGE_IDS.items() if now - v < MSG_TTL}
    if len(GREETED_USERS) > 5000:
        GREETED_USERS = {k: v for k, v in GREETED_USERS.items() if now - v < GREET_TTL}
    if len(LAST_INTENT) > 5000:
        LAST_INTENT = {k: v for k, v in LAST_INTENT.items() if now - v.get("ts", now) < GREET_TTL}
    if len(USER_CONTEXT) > 5000:
        USER_CONTEXT = {k: v for k, v in USER_CONTEXT.items() if now - v.get("ts", now) < CTX_TTL}

    MENU_TEXT = (
        "üëâ Elige una opci√≥n del men√∫:\n"
        "1) Asesor√≠a en pensiones IMSS (Ley 73 / Modalidad 40 / Modalidad 10)\n"
        "2) Seguros de auto (Amplia PLUS, Amplia, Limitada)\n"
        "3) Seguros de vida y salud\n"
        "4) Tarjetas m√©dicas VRIM\n"
        "5) Pr√©stamos a pensionados IMSS (a partir de $40,000 pesos hasta $650,000)\n"
        "6) Financiamiento empresarial y n√≥mina empresarial\n"
        "7) Contactar con Christian\n"
        "\nEscribe el n√∫mero de la opci√≥n o 'menu' para volver a ver el men√∫."
    )

    OPTION_RESPONSES = {
        "1": "üßì Asesor√≠a en pensiones IMSS. Cu√©ntame tu caso (Ley 73, M40, M10) y te gu√≠o paso a paso.",
        "2": "üöó Seguro de auto. Env√≠ame *foto de tu INE* y *tarjeta de circulaci√≥n* o tu *n√∫mero de placa* para cotizar.",
        "3": "üõ°Ô∏è Seguros de vida y salud. Te preparo una cotizaci√≥n personalizada.",
        "4": "ü©∫ Tarjetas m√©dicas VRIM. Te comparto informaci√≥n y precios.",
        "5": "üí≥ Pr√©stamos a pensionados IMSS. Monto *a partir de $40,000* y hasta $650,000. Dime tu pensi√≥n aproximada y el monto deseado.",
        "6": "üè¢ Financiamiento empresarial y n√≥mina. ¬øQu√© necesitas: *cr√©dito*, *factoraje* o *n√≥mina*?",
        "7": "üìû ¬°Listo! He notificado a Christian para que te contacte y te d√© seguimiento."
    }

    OPTION_TITLES = {
        "1": "Asesor√≠a en pensiones IMSS",
        "2": "Seguros de auto",
        "3": "Seguros de vida y salud",
        "4": "Tarjetas m√©dicas VRIM",
        "5": "Pr√©stamos a pensionados IMSS",
        "6": "Financiamiento/n√≥mina empresarial",
        "7": "Contacto con Christian"
    }

    KEYWORD_INTENTS = [
        (("pension", "pensi√≥n", "imss", "modalidad 40", "modalidad 10", "ley 73"), "1"),
        (("auto", "seguro de auto", "placa", "tarjeta de circulaci√≥n", "coche", "carro"), "2"),
        (("vida", "seguro de vida", "salud", "gastos m√©dicos", "planes de seguro"), "3"),
        (("vrim", "tarjeta m√©dica", "membres√≠a m√©dica"), "4"),
        (("pr√©stamo", "prestamo", "pensionado", "pr√©stamo imss", "prestamo imss"), "5"),
        (("financiamiento", "factoraje", "n√≥mina", "nomina", "empresarial", "cr√©dito empresarial", "credito empresarial"), "6"),
        (("contacto", "contactar", "asesor", "christian", "ll√°mame", "quiero hablar"), "7"),
    ]

    def infer_option_from_text(t: str):
        for keywords, opt in KEYWORD_INTENTS:
            if any(k in t for k in keywords):
                return opt
        return None

    # ---- Procesar SOLO el primer mensaje v√°lido por payload ----
    for entry in data.get("entry", []):
        for change in entry.get("changes", []):
            val = change.get("value", {})

            if "statuses" in val:
                continue

            messages = val.get("messages", [])
            if not messages:
                continue

            message = messages[0]
            msg_id = message.get("id")
            msg_type = message.get("type")
            sender = message.get("from")
            business_phone = val.get("metadata", {}).get("display_phone_number")

            profile_name = None
            try:
                profile_name = (val.get("contacts", [{}])[0].get("profile", {}) or {}).get("name")
            except Exception:
                profile_name = None

            logging.info(f"üßæ id={msg_id} type={msg_type} from={sender} profile={profile_name}")

            if msg_id:
                last_seen = PROCESSED_MESSAGE_IDS.get(msg_id)
                if last_seen and (now - last_seen) < MSG_TTL:
                    logging.info(f"üîÅ Duplicado ignorado: {msg_id}")
                    continue
                PROCESSED_MESSAGE_IDS[msg_id] = now

            if business_phone and sender and sender.endswith(business_phone):
                logging.info("ü™û Echo desde business_phone ignorado")
                continue

            # === üÜï BLOQUE 2: manejo de medios antes de filtrar por 'text' ===
            if msg_type == "image":
                media_id = (message.get("image") or {}).get("id")
                caption = (message.get("image") or {}).get("caption", "") or ""
                try:
                    if ADVISOR_NUMBER and ADVISOR_NUMBER != sender and media_id:
                        send_media_image(
                            ADVISOR_NUMBER,
                            media_id,
                            caption=f"üìé Imagen recibida de {profile_name or sender}. {('Nota: ' + caption) if caption else ''}"
                        )
                except Exception as e:
                    logging.error(f"‚ùå Error reenviando imagen: {e}")

                send_message(sender, "‚úÖ ¬°Gracias! Recib√≠ la imagen. Si es para **seguro de auto**, con INE y tarjeta de circulaci√≥n (o placa) ya puedo cotizar. ¬øDeseas que avance?")
                continue

            if msg_type == "document":
                media_id = (message.get("document") or {}).get("id")
                filename = (message.get("document") or {}).get("filename", "")
                try:
                    if ADVISOR_NUMBER and ADVISOR_NUMBER != sender and media_id:
                        send_media_document(
                            ADVISOR_NUMBER,
                            media_id,
                            caption=f"üìÑ Documento recibido de {profile_name or sender} {f'({filename})' if filename else ''}"
                        )
                except Exception as e:
                    logging.error(f"‚ùå Error reenviando documento: {e}")

                send_message(sender, "‚úÖ ¬°Gracias! Recib√≠ tu documento. En breve lo reviso.")
                continue

            if msg_type == "audio" or (msg_type == "voice"):
                media_id = (message.get("audio") or {}).get("id")
                transcript = transcribe_audio_media(media_id) if media_id else None
                if transcript:
                    send_message(sender, f"üó£Ô∏è Transcripci√≥n: {transcript}")
                else:
                    send_message(sender, "No pude transcribir tu nota de voz. ¬øPodr√≠as intentar de nuevo o escribir el mensaje?")
                continue
            # === FIN BLOQUE 2 ===

            if msg_type != "text":
                logging.info(f"‚ÑπÔ∏è Mensaje no-texto ignorado: {msg_type}")
                continue

            text = message.get("text", {}).get("body", "") or ""
            text_norm = text.strip().lower()
            logging.info(f"‚úâÔ∏è Texto normalizado: {text_norm}")

            # -------- Contexto por usuario (financiamiento) --------
            from time import time as _t
            user_ctx = USER_CONTEXT.get(sender)
            if user_ctx and (now - user_ctx.get("ts", now) < 4 * 3600):
                ctx = user_ctx.get("ctx")
                if ctx == "financiamiento":
                    if any(k in text_norm for k in ("cr√©dito", "credito")):
                        send_message(sender, "üè¶ Cr√©dito empresarial: monto y plazo a medida. Comp√°rteme *antig√ºedad del negocio*, *ingresos aproximados* y *RFC* para iniciar.")
                        LAST_INTENT[sender] = {"opt": "6", "title": "Cr√©dito empresarial", "ts": now}
                        USER_CONTEXT[sender] = {"ctx": "financiamiento", "ts": _t()}
                        continue
                    if "factoraje" in text_norm:
                        send_message(sender, "üìÑ Factoraje: adelantamos el cobro de tus facturas. Dime *promedio mensual de facturaci√≥n* y *RFC*.")
                        LAST_INTENT[sender] = {"opt": "6", "title": "Factoraje", "ts": now}
                        USER_CONTEXT[sender] = {"ctx": "financiamiento", "ts": _t()}
                        continue
                    if any(k in text_norm for k in ("n√≥mina", "nomina")):
                        send_message(sender, "üë• N√≥mina empresarial: dispersi√≥n de sueldos y beneficios. ¬øCu√°ntos colaboradores tienes y periodicidad de pago?")
                        LAST_INTENT[sender] = {"opt": "6", "title": "N√≥mina empresarial", "ts": now}
                        USER_CONTEXT[sender] = {"ctx": "financiamiento", "ts": _t()}
                        continue
            # -------------------------------------------------------

            # ---------- GPT primero para consultas naturales ----------
            is_numeric_option = text_norm in OPTION_RESPONSES
            is_menu = text_norm in ("hola", "men√∫", "menu")
            is_natural_query = (not is_numeric_option) and (not is_menu) and any(ch.isalpha() for ch in text_norm) and (len(text_norm.split()) >= 3)

            if is_natural_query:
                ai = gpt_reply(text)
                if ai:
                    send_message(sender, ai)
                    LAST_INTENT[sender] = {"opt": "gpt", "title": "Consulta abierta", "ts": now}
                    continue
            # ---------------------------------------------------------

            # Opci√≥n 1‚Äì7 (o inferida por keywords)
            option = text_norm if is_numeric_option else infer_option_from_text(text_norm)
            if option:
                send_message(sender, OPTION_RESPONSES[option])
                LAST_INTENT[sender] = {"opt": option, "title": OPTION_TITLES.get(option), "ts": now}
                if option == "6":
                    USER_CONTEXT[sender] = {"ctx": "financiamiento", "ts": now}
                if option == "7":
    motive = "Contacto con Christian"
    notify_text = (
    "üîî *Vicky Bot ‚Äì Solicitud de contacto*
"
    f"- Nombre: {profile_name or 'No disponible'}
"
    f"- WhatsApp del cliente: {sender}
"
    f"- Motivo: {motive}
"
    f"- Mensaje original: \"{text.strip()}\""
)}\""
    )
    try:
        if ADVISOR_WHATSAPP and ADVISOR_WHATSAPP != sender:
            send_message(ADVISOR_WHATSAPP, notify_text)
            logging.info(f"üì® Notificaci√≥n privada enviada al asesor {ADVISOR_WHATSAPP}")
    except Exception as e:
        logging.error(f"‚ùå Error notificando al asesor: {e}")
    continue

            # Saludos/men√∫
            first_greet_ts = GREETED_USERS.get(sender)
            if not first_greet_ts or (now - first_greet_ts) >= GREET_TTL:
                if is_menu:
                    send_message(
                        sender,
                        "üëã Hola, soy Vicky, asistente de Christian L√≥pez. Estoy aqu√≠ para ayudarte.\n\n" + MENU_TEXT
                    )
                else:
                    send_message(sender, MENU_TEXT)
                GREETED_USERS[sender] = now
                continue

            if is_menu:
                send_message(sender, MENU_TEXT)
                continue

            # Fallback final
            logging.info("üìå Mensaje recibido (ya saludado). Respuesta gu√≠a.")
            send_message(sender, "No te entend√≠. Escribe 'menu' para ver opciones o elige un n√∫mero del 1 al 7.")

    return jsonify({"status": "ok"}), 200

# Funci√≥n para enviar mensajes
def send_message(to, text):
    url = f"https://graph.facebook.com/v21.0/{PHONE_NUMBER_ID}/messages"
    headers = {
        "Authorization": f"Bearer {WHATSAPP_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "messaging_product": "whatsapp",
        "to": to,
        "type": "text",
        "text": {"body": text}
    }

    response = requests.post(url, headers=headers, json=payload)
    logging.info(f"Respuesta de WhatsApp API: {response.status_code} - {response.text}")

# Endpoint de salud
@app.route("/health", methods=["GET"])
def health():
    return jsonify({"status": "ok"}), 200

if __name__ == "__main__":
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

# >>> VX: CONFIG & UTILS (NO TOCAR)
try:
    vx_get_env
except NameError:
    def vx_get_env(name, default=None):
        import os
        return os.getenv(name, default)

try:
    vx_normalize_phone
except NameError:
    def vx_normalize_phone(raw):
        import re
        if not raw:
            return ""
        phone = re.sub(r"[^\d]", "", str(raw))
        phone = re.sub(r"^(52|521)", "", phone)
        return phone[-10:] if len(phone) >= 10 else phone

try:
    vx_last10
except NameError:
    def vx_last10(phone):
        return vx_normalize_phone(phone)

try:
    vx_Settings
except NameError:
    class vx_Settings:
        def __init__(self):
            self.META_TOKEN = vx_get_env("META_TOKEN")
            self.WABA_PHONE_ID = vx_get_env("WABA_PHONE_ID")
            self.VERIFY_TOKEN = vx_get_env("VERIFY_TOKEN")
            self.OPENAI_API_KEY = vx_get_env("OPENAI_API_KEY")
            self.REDIS_URL = vx_get_env("REDIS_URL")
            self.GOOGLE_CREDENTIALS_JSON = vx_get_env("GOOGLE_CREDENTIALS_JSON")
            self.SHEETS_ID_LEADS = vx_get_env("SHEETS_ID_LEADS")
            self.SHEETS_TITLE_LEADS = vx_get_env("SHEETS_TITLE_LEADS")
            self.ADVISOR_WHATSAPP = vx_get_env("ADVISOR_WHATSAPP")

# >>> VX: LOGGING (NO TOCAR)
try:
    vx_setup_logging
except NameError:
    def vx_setup_logging():
        import logging
        logger = logging.getLogger()
        if not logger.hasHandlers():
            logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
        return logging.getLogger("vx")

# >>> VX: REDIS (NO TOCAR, OPCIONAL)
try:
    vx_get_redis
except NameError:
    def vx_get_redis():
        try:
            url = vx_get_env("REDIS_URL")
            if not url:
                return None
            import redis
            return redis.from_url(url)
        except Exception:
            return None

# >>> VX: WHATSAPP CLIENT (NO TOCAR)
try:
    vx_wa_send_text
except NameError:
    def vx_wa_send_text(to_e164: str, body: str):
        import requests, logging
        token = vx_get_env("META_TOKEN")
        phone_id = vx_get_env("WABA_PHONE_ID")
        if not token or not phone_id or not to_e164:
            logging.getLogger("vx").warning("vx_wa_send_text: falta config")
            return False
        url = f"https://graph.facebook.com/v20.0/{phone_id}/messages"
        headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
        payload = {
            "messaging_product": "whatsapp",
            "to": to_e164,
            "type": "text",
            "text": {"body": body}
        }
        try:
            resp = requests.post(url, headers=headers, json=payload, timeout=9)
            logging.getLogger("vx").info(f"vx_wa_send_text: {resp.status_code} {resp.text[:160]}")
            return resp.status_code == 200
        except Exception as e:
            logging.getLogger("vx").error(f"vx_wa_send_text error: {e}")
            return False

try:
    vx_wa_mark_read
except NameError:
    def vx_wa_mark_read(message_id: str):
        import requests, logging
        token = vx_get_env("META_TOKEN")
        phone_id = vx_get_env("WABA_PHONE_ID")
        if not token or not phone_id or not message_id:
            logging.getLogger("vx").warning("vx_wa_mark_read: falta config")
            return False
        url = f"https://graph.facebook.com/v20.0/{phone_id}/messages"
        headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
        payload = {
            "messaging_product": "whatsapp",
            "status": "read",
            "message_id": message_id
        }
        try:
            resp = requests.post(url, headers=headers, json=payload, timeout=9)
            logging.getLogger("vx").info(f"vx_wa_mark_read: {resp.status_code} {resp.text[:120]}")
            return resp.status_code == 200
        except Exception as e:
            logging.getLogger("vx").error(f"vx_wa_mark_read error: {e}")
            return False


try:
    vx_wa_send_template
except NameError:
    def vx_wa_send_template(to_e164: str, template_name: str, lang_code: str = "es_MX", components: list | None = None):
        import requests, logging
        token = vx_get_env("META_TOKEN")
        phone_id = vx_get_env("WABA_PHONE_ID")
        if not token or not phone_id or not to_e164 or not template_name:
            logging.getLogger("vx").warning("vx_wa_send_template: falta config/params")
            return False
        url = f"https://graph.facebook.com/v20.0/{phone_id}/messages"
        headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
        payload = {
            "messaging_product": "whatsapp",
            "to": to_e164,
            "type": "template",
            "template": {
                "name": template_name,
                "language": {"code": lang_code},
            }
        }
        if components:
            payload["template"]["components"] = components
        try:
            resp = requests.post(url, headers=headers, json=payload, timeout=12)
            logging.getLogger("vx").info(f"vx_wa_send_template: {resp.status_code} {resp.text[:160]}")
            return resp.status_code == 200
        except Exception as e:
            logging.getLogger("vx").error(f"vx_wa_send_template error: {e}")
            return False

# >>> VX: GPT (NO TOCAR)
try:
    vx_gpt_reply
except NameError:
    def vx_gpt_reply(user_text: str, system_text: str = None) -> str:
        import logging
        api_key = vx_get_env("OPENAI_API_KEY")
        if not api_key:
            return "No tengo IA disponible en este momento. Por favor elige una opci√≥n del men√∫."
        try:
            import openai
            client = openai.OpenAI(api_key=api_key)
            system = system_text or (
                "Eres Vicky, asistente de Christian L√≥pez. Responde en espa√±ol, breve, clara y orientada al siguiente paso."
            )
            completion = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": system},
                    {"role": "user", "content": user_text},
                ],
                max_tokens=120,
                temperature=0.2,
            )
            return completion.choices[0].message.content.strip()
        except Exception as e:
            logging.getLogger("vx").error(f"vx_gpt_reply error: {e}")
            return "No tengo IA disponible en este momento. Por favor elige una opci√≥n del men√∫."

# >>> VX: SHEETS (NO TOCAR)
try:
    vx_sheet_find_by_phone
except NameError:
    def vx_sheet_find_by_phone(last10: str):
        import logging
        import json
        try:
            creds_json = vx_get_env("GOOGLE_CREDENTIALS_JSON")
            sheets_id = vx_get_env("SHEETS_ID_LEADS")
            sheets_title = vx_get_env("SHEETS_TITLE_LEADS")
            if not creds_json or not sheets_id or not sheets_title or not last10:
                return None
            import gspread
            from gspread import service_account_from_dict
            creds_dict = json.loads(creds_json)
            client = service_account_from_dict(creds_dict)
            sheet = client.open_by_key(sheets_id)
            ws = sheet.worksheet(sheets_title)
            rows = ws.get_all_records()
            for row in rows:
                wa = str(row.get("WhatsApp", ""))
                if vx_last10(wa) == last10:
                    return row
            return None
        except Exception as e:
            logging.getLogger("vx").error(f"vx_sheet_find_by_phone error: {e}")
            return None

# >>> VX: MENU BUILDER (NO TOCAR)
try:
    vx_menu_text
except NameError:
    def vx_menu_text(customer_name: str = None) -> str:
        base = (
            "Hola, soy Vicky, asistente de Christian L√≥pez. Estoy aqu√≠ para ayudarte.\n\n"
            "1) Asesor√≠a en pensiones IMSS\n"
            "2) Seguro de auto (Amplia PLUS, Amplia, Limitada) ‚Äî solicita INE y tarjeta de circulaci√≥n o n√∫mero de placa\n"
            "3) Seguros de vida y salud\n"
            "4) Tarjetas m√©dicas VRIM\n"
            "5) Pr√©stamos a pensionados IMSS ($10,000 a $650,000)\n"
            "6) Financiamiento empresarial (incluye financiamiento para tus clientes)\n"
            "7) N√≥mina empresarial\n"
            "8) Contactar con Christian (te notifico para que te atienda)\n\n"
            "¬øEn qu√© te ayudo?"
        )
        if customer_name:
            return f"Hola {customer_name}, " + base[5:]
        return base

# >>> VX: ROUTES /ext (NO TOCAR)
try:
    vx_ext_routes_registered
except NameError:
    vx_ext_routes_registered = True
    from flask import request, jsonify

    @app.get("/ext/health")
    def vx_ext_health():
        return jsonify({"status": "ok"})

    @app.get("/ext/webhook")
    def vx_ext_webhook_get():
        import logging
        mode = request.args.get("hub.mode")
        token = request.args.get("hub.verify_token")
        challenge = request.args.get("hub.challenge")
        verify_token = vx_get_env("VERIFY_TOKEN")
        if mode == "subscribe" and token == verify_token:
            logging.getLogger("vx").info("vx_ext_webhook: verificado OK")
            return challenge or "OK", 200
        else:
            logging.getLogger("vx").warning("vx_ext_webhook: verificaci√≥n fallida")
            return "Verification failed", 403

    @app.post("/ext/webhook")
    def vx_ext_webhook_post():
        import logging, json
        try:
            payload = request.get_json(force=True, silent=True)
            if not payload:
                return jsonify({"status": "ignored"}), 200
            entry = payload.get("entry", [{}])[0]
            changes = entry.get("changes", [{}])
            if not changes or "value" not in changes[0]:
                return jsonify({"status": "ignored"}), 200
            value = changes[0]["value"]
            msgs = value.get("messages", [])
            if not msgs:
                return jsonify({"status": "ignored"}), 200
            msg = msgs[0]
            from_number = msg.get("from")
            message_id = msg.get("id")
            body = ""
            if msg.get("type") == "text":
                body = msg.get("text", {}).get("body", "") or ""
            else:
                body = ""
            last10 = vx_last10(from_number)
            customer = None
            sheet_row = None
            if last10:
                sheet_row = vx_sheet_find_by_phone(last10)
                if sheet_row and "Nombre" in sheet_row:
                    customer = str(sheet_row["Nombre"])
            menu_text = vx_menu_text(customer)
            vx_wa_send_text(from_number, menu_text)
            if message_id:
                vx_wa_mark_read(message_id)
            return jsonify({"status": "ok"}), 200
        except Exception as e:
            logging.getLogger("vx").error(f"vx_ext_webhook_post error: {e}")
            return jsonify({"status": "ok"}), 200

    @app.route("/ext/test-send", methods=["GET", "POST"])
    def vx_ext_test_send():
        import logging
        try:
            if request.method == "GET":
                return jsonify({
                    "status": "ready",
                    "note": "Usa POST con {to, text} en JSON para enviar mensaje de prueba"
                }), 200

            data = request.get_json(force=True, silent=True)
            if not data:
                return jsonify({"ok": False, "error": "Falta JSON con 'to' y 'text'"}), 400

            to = data.get("to")
            text = data.get("text")
            ok = vx_wa_send_text(to, text)
            return jsonify({"ok": ok}), 200
        except Exception as e:
            logging.getLogger("vx").error(f"vx_ext_test_send error: {e}")
            return jsonify({"ok": False, "error": str(e)}), 200

    @app.route("/ext/test-send-form", methods=["GET", "POST"])
    def vx_ext_test_send_form():
        from flask import render_template_string, request
        if request.method == "POST":
            to = request.form.get("to")
            text = request.form.get("text")
            ok = vx_wa_send_text(to, text)
            return f"<p>Mensaje enviado a {to}: {ok}</p><a href='/ext/test-send-form'>Volver</a>"
        html = """
        <h2>Prueba de env√≠o WhatsApp</h2>
        <form method='post'>
            <label>N√∫mero (E.164, ej. 5216682478005):</label><br>
            <input type='text' name='to' style='width:300px'><br><br>
            <label>Mensaje:</label><br>
            <textarea name='text' rows='4' cols='40'></textarea><br><br>
            <button type='submit'>Enviar</button>
        </form>
        """
        return render_template_string(html)


    
@app.route("/ext/send-promo", methods=["POST"])
def vx_ext_send_promo():
    data = request.get_json(force=True)
    to = data.get("to")
    text = data.get("text")
    template = data.get("template")
    use_secom = data.get("secom", False)
    producto = data.get("producto", "")

    def _task():
        try:
            targets = []
            if to:
                targets.append(to)
            if use_secom:
                try:
                    creds = Credentials.from_service_account_info(json.loads(os.getenv("GOOGLE_CREDENTIALS_JSON")))
                    gs = gspread.authorize(creds)
                    sh = gs.open_by_key(os.getenv("SHEETS_ID_LEADS"))
                    ws = sh.worksheet(os.getenv("SHEETS_TITLE_LEADS"))
                    numbers = [str(r[0]) for r in ws.get_all_values()[1:]]
                    targets.extend(list(set(numbers)))
                except Exception as e:
                    logging.error(f"Error leyendo SECOM en send-promo: {e}")
            for target in targets:
                if template:
                    send_template_message(target, template)
                else:
                    send_message(target, text)
        except Exception as e:
            logging.error(f"‚ùå Error en env√≠o promo: {e}")

    threading.Thread(target=_task).start()
    return jsonify({"ok": True})


):
        """
        Env√≠a PROMO por WhatsApp.
        Body JSON:
        {
          "to": "5216682478005" | ["5216...","5218..."],
          "text": "mensaje libre",                  # opcional
          "template": "promo_auto_v1",              # opcional (string)
          "params": { "nombre": "X", "oferta": "Y"} # opcional (dict)
        }
        """
        import threading, logging

        data = request.get_json(force=True, silent=True) or {}
        to = data.get("to")
        text = data.get("text")
        template = data.get("template")
        params = data.get("params", {})

        if isinstance(to, str):
            targets = [to]
        elif isinstance(to, list):
            targets = [str(x) for x in to if str(x).strip()]
        else:
            return jsonify({"ok": False, "error": "Falta 'to' (string o lista)"}), 400

        def _worker(targets, text, template, params):
            results = []
            for num in targets:
                ok = False
                try:
                    if template:
                        comps = []
                        if params:
                            comps = [{
                                "type": "body",
                                "parameters": [
                                    {"type": "text", "text": str(v)}
                                    for v in params.values()
                                ]
                            }]
                        ok = vx_wa_send_template(num, template, "es_MX", comps)
                    elif text:
                        ok = vx_wa_send_text(num, text)
                    results.append({"to": num, "sent": ok})
                except Exception as e:
                    logging.getLogger("vx").error(f"send_promo worker error: {e}")
                    results.append({"to": num, "sent": False, "error": str(e)})
            logging.getLogger("vx").info(f"send_promo done: {results}")

        threading.Thread(target=_worker, args=(targets, text, template, params), daemon=True).start()
        return jsonify({"accepted": True, "count": len(targets)}), 202


# ========= SECOM minimal integration (non-invasive) =========
try:
    from flask import Blueprint, request, jsonify
except Exception:
    from flask import Blueprint, request, jsonify  # type: ignore

def _vx_last10(phone: str) -> str:
    try:
        import re as _re
        if not phone:
            return ""
        p = _re.sub(r"[^\d]", "", str(phone))
        p = _re.sub(r"^(52|521)", "", p)
        return p[-10:] if len(p) >= 10 else p
    except Exception:
        return str(phone)[-10:] if phone else ""

def _vx_sheet_find_by_phone(last10: str):
    import os, json, logging
    try:
        gj = os.getenv("GOOGLE_CREDENTIALS_JSON")
        sid = os.getenv("SHEETS_ID_LEADS")
        title = os.getenv("SHEETS_TITLE_LEADS")
        if not (gj and sid and title and last10):
            return None, "Missing env vars or phone"
        from google.oauth2.service_account import Credentials
        import gspread
        scopes = [
            "https://www.googleapis.com/auth/spreadsheets.readonly",
            "https://www.googleapis.com/auth/drive.readonly",
        ]
        info = json.loads(gj)
        creds = Credentials.from_service_account_info(info, scopes=scopes)
        client = gspread.authorize(creds)
        ws = client.open_by_key(sid).worksheet(title)
        rows = ws.get_all_records()
        for row in rows:
            wa = str(row.get("WhatsApp", ""))
            if _vx_last10(wa) == last10:
                return row, None
        return None, None
    except Exception as e:
        logging.error(f"SECOM lookup error: {e}")
        return None, str(e)

_ext_bp = Blueprint("vx_ext", __name__)

@_ext_bp.get("/test-secom")
def vx_test_secom():
    phone = request.args.get("phone", "").strip()
    if not phone:
        return jsonify({"ok": False, "error": "Debes enviar ?phone=NUMERO"}), 400
    row, err = _vx_sheet_find_by_phone(_vx_last10(phone))
    if err:
        return jsonify({"ok": False, "error": err}), 500
    if row:
        return jsonify({
            "ok": True,
            "match": {
                "nombre": row.get("Nombre", ""),
                "whatsapp": row.get("WhatsApp", ""),
                "rfc": row.get("RFC", ""),
                "beneficio": "Hasta 60% de descuento en seguro de auto üöó"
            }
        }), 200
    return jsonify({"ok": False, "message": "No se encontr√≥ coincidencia"}), 200

try:
    app.register_blueprint(_ext_bp, url_prefix="/ext")  # type: ignore
except Exception:
    pass
# ====== End SECOM minimal integration ======
